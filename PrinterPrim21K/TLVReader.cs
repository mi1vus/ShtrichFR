using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using DrvFRLib;
using CachType = System.Collections.Generic.Dictionary<System.UInt32, ShtrihFR.TLVReader.ТЛВОтчет>;

namespace ShtrihFR
{
    public class TLVReader
    {
        #region Перечисления
        public enum TLVDocType
        {
            Ошибка = -1,
            Отчет_о_регистрации = 1,
            Отчет_об_открытии_смены = 2,
            Кассовый_чек = 3,
            Бланк_строгой_отчетности = 4,
            Отчёт_о_закрытии_смены = 5,
            Отчет_о_закрытии_фискального_накопителя = 6,
            Отчёт_об_изменении_параметров_регистрации = 11,
            Отчет_о_состоянии_расчетов = 21,
            Кассовый_чек_коррекции = 31
        }
        public enum TLVIncomType
        {
            приход = 1,
            возврат_прихода = 2,
            расход = 3,
            возврат_расхода = 4
        }
        private enum TLVTag
        {
            //общие
            НомерФН = 1041,
            НомерККТ = 1037,
            NHH = 1018,
            НомерДокумента = 1040,
            Дата = 1012,
            ФПДокумента = 1077,
            НомерСмены = 1038,
            НаименованиеПользователя = 1048,
            АдресатРасчетов = 1009,
            //закр.смены
            ЧековЗаСмену = 1118,
            ФискальныхДокументовЗаСмену = 1111,
            НепереданныхДокументовЗаСмену = 1097,
            ДатаИВремяПервогоНепереданного = 1098,
            ИсчерпаниеРесурсовФН = 1050,
            НеобходимаЗаменаФН = 1051,
            ПереполнениеПамятиФН = 1052,
            ПревышВремяОжиданияОтветаОФД = 1053,
            Кассир = 1021,
            //чек
            НомерЧекаВСмене = 1042,
            Приход = 1054,
            Итог = 1020,
            ПредметРасчета = 1059,
            НомерАвтомата = 1036,
            СуммаНал = 1031,
            СуммаЭлектронно = 1081,
            СуммаБезНДС = 1105,
            ТелефонИлиEMail = 1008,
            НалоговаяСистема = 1055
        }
        private enum TLVObjectTag
        {
            НаименованиеПредметаРасчета = 1030,
            ЦенаСоСкидкамиИНаценками = 1079,
            КоличествоПредметаРасчета = 1023,
            СтоимостьСоСкидкамиИНаценками = 1043,
            СтоимостьБезНДС = 1105
        }

        public enum CashRegisterType
        {
            Накопление_продаж_в_1_отдел_в_чеке = 0,
            Накопление_покупок_в_1_отдел_в_чеке = 1,
            Накопление_возврата_продаж_в_1_отдел_в_чеке = 2,
            Накопление_возврата_покупок_в_1_отдел_в_чеке = 3,
            Накопление_скидок_с_продаж_в_чеке = 64,
            Накопление_скидок_с_покупок_в_чеке = 65,
            Накопление_скидок_с_возврата_продаж_в_чеке = 66,
            Накопление_скидок_с_возврата_покупок_в_чеке = 67,
            Накопление_надбавок_на_продажи_в_чеке = 68,
            Накопление_надбавок_на_покупок_в_чеке = 69,
            Накопление_надбавок_на_возврата_продаж_в_чеке = 70,
            Накопление_надбавок_на_возврата_покупок_в_чеке = 71,
            Накопление_оплат_продаж_наличными_в_чеке = 72,
            Накопление_оплат_покупок_наличными_в_чеке = 73,
            Накопление_оплат_возврата_продаж_наличными_в_чеке = 74,
            Накопление_оплат_возврата_покупок_наличными_в_чеке = 75,
            Накопление_оплат_продаж_видом_оплаты_2_в_чеке = 76,
            Накопление_оплат_покупок_видом_оплаты_2_в_чеке = 77,
            Накопление_оплат_возврата_продаж_видом_оплаты_2_в_чеке = 78,
            Накопление_оплат_возврата_покупок_видом_оплаты_2_в_чеке = 79,
            Накопление_оплат_продаж_видом_оплаты_3_в_чеке = 80,
            Накопление_оплат_покупок_видом_оплаты_3_в_чеке = 81,
            Накопление_оплат_возврата_продаж_видом_оплаты_3_в_чеке = 82,
            Накопление_оплат_возврата_покупок_видом_оплаты_3_в_чеке = 83,
            Накопление_оплат_продаж_видом_оплаты_4_в_чеке = 84,
            Накопление_оплат_покупок_видом_оплаты_4_в_чеке = 85,
            Накопление_оплат_возврата_продаж_видом_оплаты_4_в_чеке = 86,
            Накопление_оплат_возврата_покупок_видом_оплаты_4_в_чеке = 87,
            Наличность_в_кассе_на_момент_закрытия_чека = 120,
            Накопление_продаж_в_1_отдел_в_смене = 121,
            Накопление_покупок_в_1_отдел_в_смене = 122,
            Накопление_возврата_продаж_в_1_отдел_в_смене = 123,
            Накопление_возврата_покупок_в_1_отдел_в_смене = 124,
            Накопление_скидок_с_продаж_в_смене = 185,
            Накопление_скидок_с_покупок_в_смене = 186,
            Накопление_скидок_с_возврата_продаж_в_смене = 187,
            Накопление_скидок_с_возврата_покупок_в_смене = 188,
            Накопление_надбавок_на_продажи_в_смене = 189,
            Накопление_надбавок_на_покупок_в_смене = 190,
            Накопление_надбавок_на_возврата_продаж_в_смене = 191,
            Накопление_надбавок_на_возврата_покупок_в_смене = 192,
            Накопление_оплат_продаж_наличными_в_смене = 193,
            Накопление_оплат_покупок_наличными_в_смене = 194,
            Накопление_оплат_возврата_продаж_наличными_в_смене = 195,
            Накопление_оплат_возврата_покупок_наличными_в_смене = 196,
            Накопление_оплат_продаж_видом_оплаты_2_в_смене = 197,
            Накопление_оплат_покупок_видом_оплаты_2_в_смене = 198,
            Накопление_оплат_возврата_продаж_видом_оплаты_2_в_смене = 199,
            Накопление_оплат_возврата_покупок_видом_оплаты_2_в_смене = 200,
            Накопление_оплат_продаж_видом_оплаты_3_в_смене = 201,
            Накопление_оплат_покупок_видом_оплаты_3_в_смене = 202,
            Накопление_оплат_возврата_продаж_видом_оплаты_3_в_смене = 203,
            Накопление_оплат_возврата_покупок_видом_оплаты_3_в_смене = 204,
            Накопление_оплат_продаж_видом_оплаты_4_в_смене = 205,
            Накопление_оплат_покупок_видом_оплаты_4_в_смене = 206,
            Накопление_оплат_возврата_продаж_видом_оплаты_4_в_смене = 207,
            Накопление_оплат_возврата_покупок_видом_оплаты_4_в_смене = 208,
            Накопление_наличности_в_кассе = 241,
            Накопление_внесений_за_смену = 242,
            Накопление_выплат_за_смену = 243,
            Необнуляемая_сумма_до_фискализации = 244,
            Сумма_продаж_в_смене_из_ЭКЛЗ = 245,
            Сумма_покупок_в_смене_из_ЭКЛЗ = 246,
            Сумма_возвратов_продаж_в_смене_из_ЭКЛЗ = 247,
            Сумма_возвратов_покупок_в_смене_из_ЭКЛЗ = 248,
            Сумма_аннулированных_продаж_в_смене = 249,
            Сумма_аннулированных_покупок_в_смене = 250,
            Сумма_аннулированных_возвратов_продаж_в_смене = 251,
            Сумма_аннулированных_возвратов_покупок_в_смене = 252,
            Накопления_по_аннулированиям_в_смене = 255,

        }
        public enum OperationRegisterType
        {
            Количество_продаж_в_1_отдел_в_чеке = 0,
            Количество_покупок_в_1_отдел_в_чеке = 1,
            Количество_возврата_продаж_в_1_отдел_в_чеке = 2,
            Количество_возврата_покупок_в_1_отдел_в_чеке = 3,
            Количество_продаж_в_2_отдел_в_чеке = 4,
            Количество_покупок_в_2_отдел_в_чеке = 5,
            Количество_возврата_продаж_в_2_отдел_в_чеке = 6,
            Количество_возврата_покупок_в_2_отдел_в_чеке = 7,
            Количество_продаж_в_3_отдел_в_чеке = 8,
            Количество_покупок_в_3_отдел_в_чеке = 9,
            Количество_возврата_продаж_в_3_отдел_в_чеке = 10,
            Количество_возврата_покупок_в_3_отдел_в_чеке = 11,
            Количество_продаж_в_4_отдел_в_чеке = 12,
            Количество_покупок_в_4_отдел_в_чеке = 13,
            Количество_возврата_продаж_в_4_отдел_в_чеке = 14,
            Количество_возврата_покупок_в_4_отдел_в_чеке = 15,
            Количество_продаж_в_5_отдел_в_чеке = 16,
            Количество_покупок_в_5_отдел_в_чеке = 17,
            Количество_возврата_продаж_в_5_отдел_в_чеке = 18,
            Количество_возврата_покупок_в_5_отдел_в_чеке = 19,
            Количество_продаж_в_6_отдел_в_чеке = 20,
            Количество_покупок_в_6_отдел_в_чеке = 21,
            Количество_возврата_продаж_в_6_отдел_в_чеке = 22,
            Количество_возврата_покупок_в_6_отдел_в_чеке = 23,
            Количество_продаж_в_7_отдел_в_чеке = 24,
            Количество_покупок_в_7_отдел_в_чеке = 25,
            Количество_возврата_продаж_в_7_отдел_в_чеке = 26,
            Количество_возврата_покупок_в_7_отдел_в_чеке = 27,
            Количество_продаж_в_8_отдел_в_чеке = 28,
            Количество_покупок_в_8_отдел_в_чеке = 29,
            Количество_возврата_продаж_в_8_отдел_в_чеке = 30,
            Количество_возврата_покупок_в_8_отдел_в_чеке = 31,
            Количество_продаж_в_9_отдел_в_чеке = 32,
            Количество_покупок_в_9_отдел_в_чеке = 33,
            Количество_возврата_продаж_в_9_отдел_в_чеке = 34,
            Количество_возврата_покупок_в_9_отдел_в_чеке = 35,
            Количество_продаж_в_10_отдел_в_чеке = 36,
            Количество_покупок_в_10_отдел_в_чеке = 37,
            Количество_возврата_продаж_в_10_отдел_в_чеке = 38,
            Количество_возврата_покупок_в_10_отдел_в_чеке = 39,
            Количество_продаж_в_11_отдел_в_чеке = 40,
            Количество_покупок_в_11_отдел_в_чеке = 41,
            Количество_возврата_продаж_в_11_отдел_в_чеке = 42,
            Количество_возврата_покупок_в_11_отдел_в_чеке = 43,
            Количество_продаж_в_12_отдел_в_чеке = 44,
            Количество_покупок_в_12_отдел_в_чеке = 45,
            Количество_возврата_продаж_в_12_отдел_в_чеке = 46,
            Количество_возврата_покупок_в_12_отдел_в_чеке = 47,
            Количество_продаж_в_13_отдел_в_чеке = 48,
            Количество_покупок_в_13_отдел_в_чеке = 49,
            Количество_возврата_продаж_в_13_отдел_в_чеке = 50,
            Количество_возврата_покупок_в_13_отдел_в_чеке = 51,
            Количество_продаж_в_14_отдел_в_чеке = 52,
            Количество_покупок_в_14_отдел_в_чеке = 53,
            Количество_возврата_продаж_в_14_отдел_в_чеке = 54,
            Количество_возврата_покупок_в_14_отдел_в_чеке = 55,
            Количество_продаж_в_15_отдел_в_чеке = 56,
            Количество_покупок_в_15_отдел_в_чеке = 57,
            Количество_возврата_продаж_в_15_отдел_в_чеке = 58,
            Количество_возврата_покупок_в_15_отдел_в_чеке = 59,
            Количество_продаж_в_16_отдел_в_чеке = 60,
            Количество_покупок_в_16_отдел_в_чеке = 61,
            Количество_возврата_продаж_в_16_отдел_в_чеке = 62,
            Количество_возврата_покупок_в_16_отдел_в_чеке = 63,
            Количество_скидок_с_продаж_в_чеке = 64,
            Количество_скидок_с_покупок_в_чеке = 65,
            Количество_скидок_с_возврата_продаж_в_чеке = 66,
            Количество_скидок_с_возврата_покупок_в_чеке = 67,
            Количество_надбавок_на_продажи_в_чеке = 68,
            Количество_надбавок_на_покупок_в_чеке = 69,
            Количество_надбавок_на_возврата_продаж_в_чеке = 70,
            Количество_надбавок_на_возврата_покупок_в_чеке = 71,
            Количество_продаж_в_1_отдел_в_смене = 72,
            Количество_покупок_в_1_отдел_в_смене = 73,
            Количество_возврата_продаж_в_1_отдел_в_смене = 74,
            Количество_возврата_покупок_в_1_отдел_в_смене = 75,
            Количество_продаж_в_2_отдел_в_смене = 76,
            Количество_покупок_в_2_отдел_в_смене = 77,
            Количество_возврата_продаж_в_2_отдел_в_смене = 78,
            Количество_возврата_покупок_в_2_отдел_в_смене = 79,
            Количество_продаж_в_3_отдел_в_смене = 80,
            Количество_покупок_в_3_отдел_в_смене = 81,
            Количество_возврата_продаж_в_3_отдел_в_смене = 82,
            Количество_возврата_покупок_в_3_отдел_в_смене = 83,
            Количество_продаж_в_4_отдел_в_смене = 84,
            Количество_покупок_в_4_отдел_в_смене = 85,
            Количество_возврата_продаж_в_4_отдел_в_смене = 86,
            Количество_возврата_покупок_в_4_отдел_в_смене = 87,
            Количество_продаж_в_5_отдел_в_смене = 88,
            Количество_покупок_в_5_отдел_в_смене = 89,
            Количество_возврата_продаж_в_5_отдел_в_смене = 90,
            Количество_возврата_покупок_в_5_отдел_в_смене = 91,
            Количество_продаж_в_6_отдел_в_смене = 92,
            Количество_покупок_в_6_отдел_в_смене = 93,
            Количество_возврата_продаж_в_6_отдел_в_смене = 94,
            Количество_возврата_покупок_в_6_отдел_в_смене = 95,
            Количество_продаж_в_7_отдел_в_смене = 96,
            Количество_покупок_в_7_отдел_в_смене = 97,
            Количество_возврата_продаж_в_7_отдел_в_смене = 98,
            Количество_возврата_покупок_в_7_отдел_в_смене = 99,
            Количество_продаж_в_8_отдел_в_смене = 100,
            Количество_покупок_в_8_отдел_в_смене = 101,
            Количество_возврата_продаж_в_8_отдел_в_смене = 102,
            Количество_возврата_покупок_в_8_отдел_в_смене = 103,
            Количество_продаж_в_9_отдел_в_смене = 104,
            Количество_покупок_в_9_отдел_в_смене = 105,
            Количество_возврата_продаж_в_9_отдел_в_смене = 106,
            Количество_возврата_покупок_в_9_отдел_в_смене = 107,
            Количество_продаж_в_10_отдел_в_смене = 108,
            Количество_покупок_в_10_отдел_в_смене = 109,
            Количество_возврата_продаж_в_10_отдел_в_смене = 110,
            Количество_возврата_покупок_в_10_отдел_в_смене = 111,
            Количество_продаж_в_11_отдел_в_смене = 112,
            Количество_покупок_в_11_отдел_в_смене = 113,
            Количество_возврата_продаж_в_11_отдел_в_смене = 114,
            Количество_возврата_покупок_в_11_отдел_в_смене = 115,
            Количество_продаж_в_12_отдел_в_смене = 116,
            Количество_покупок_в_12_отдел_в_смене = 117,
            Количество_возврата_продаж_в_12_отдел_в_смене = 118,
            Количество_возврата_покупок_в_12_отдел_в_смене = 119,
            Количество_продаж_в_13_отдел_в_смене = 120,
            Количество_покупок_в_13_отдел_в_смене = 121,
            Количество_возврата_продаж_в_13_отдел_в_смене = 122,
            Количество_возврата_покупок_в_13_отдел_в_смене = 123,
            Количество_продаж_в_14_отдел_в_смене = 124,
            Количество_покупок_в_14_отдел_в_смене = 125,
            Количество_возврата_продаж_в_14_отдел_в_смене = 126,
            Количество_возврата_покупок_в_14_отдел_в_смене = 127,
            Количество_продаж_в_15_отдел_в_смене = 128,
            Количество_покупок_в_15_отдел_в_смене = 129,
            Количество_возврата_продаж_в_15_отдел_в_смене = 130,
            Количество_возврата_покупок_в_15_отдел_в_смене = 131,
            Количество_продаж_в_16_отдел_в_смене = 132,
            Количество_покупок_в_16_отдел_в_смене = 133,
            Количество_возврата_продаж_в_16_отдел_в_смене = 134,
            Количество_возврата_покупок_в_16_отдел_в_смене = 135,
            Количество_скидок_с_продаж_в_смене = 136,
            Количество_скидок_с_покупок_в_смене = 137,
            Количество_скидок_с_возврата_продаж_в_смене = 138,
            Количество_скидок_с_возврата_покупок_в_смене = 139,
            Количество_надбавок_на_продажи_в_смене = 140,
            Количество_надбавок_на_покупки_в_смене = 141,
            Количество_надбавок_на_возвраты_продаж_в_смене = 142,
            Количество_надбавок_на_возвраты_покупок_в_смене = 143,
            Количество_чеков_продаж_в_смене = 144,
            Количество_чеков_покупок_в_смене = 145,
            Количество_чеков_возврата_продаж_в_смене = 146,
            Количество_чеков_возврата_покупок_в_смене = 147,
            Номер_чека_продаж = 148,
            Номер_чека_покупок = 149,
            Номер_чека_возврата_продаж = 150,
            Номер_чека_возврата_покупок = 151,
            Сквозной_номер_документа1 = 152,
            Количество_внесений_денежных_сумм_за_смену = 153,
            Количество_выплат_денежных_сумм_за_смену = 154,
            Номер_внесения_денежных_сумм = 155,
            Номер_выплаты_денежных_сумм = 156,
            Количество_отмененных_документов_за_смену = 157,
            Номер_сменного_отчета_без_гашения = 158,
            Номер_сменного_отчета_с_гашением_до_фискализации = 159,
            Номер_общего_гашения = 160,
            Номер_полного_фискального_отчета = 161,
            Номер_сокращенного_фискального_отчета = 162,
            Номер_тестового_прогона = 163,
            Номер_снятия_показаний_операционных_регистров = 164,
            Номер_отчетов_по_секциям = 165,
            Количество_аннулирований = 166,
            Количество_запусков_теста_самодиагностики = 167,
            Количество_активизаций_ЭКЛЗ = 168,
            Количество_отчетов_по_итогам_активизации_ЭКЛЗ = 169,
            Количество_отчетов_пономеру_КПКиз_ЭКЛЗ = 170,
            Количество_отчетов_по_контрольной_ленте_из_ЭКЛЗ = 171,
            Количество_отчетов_податам_из_ЭКЛЗ = 172,
            Количество_отчетов_посменам_из_ЭКЛЗ = 173,
            Количество_отчетов_поитогам_смен_из_ЭКЛЗ = 174,
            Количество_отчетов_податам_в_отделе_из_ЭКЛЗ = 175,
            Количество_отчетов_посменам_в_отделе_из_ЭКЛЗ = 176,
            Количество_закрытий_архивов_ЭКЛЗ = 177,
            Номер_отчета_по_налогам = 178,
            Количество_аннулированных_чеков_продаж = 179,
            Количество_аннулированных_чеков_покупок = 180,
            Количество_аннулированных_чеков_возврата_продаж = 181,
            Количество_аннулированных_чеков_возврата_покупок = 182,
            Количество_нефискальных_документов_в_день = 183,
            Количество_нефискальных_документов1 = 184,
            Сквозной_номер_документа2 = 185,
            Сквозной_номер_документа3 = 186,
            Количество_стационарных_проверок_ПО_ФП = 187,
            Номер_отчетов_по_кассирам = 188,
            Номер_отчетов_почасовых = 189,
            Номер_отчетов_по_товарам = 190,
            Количество_нефискальных_документов_за_смену = 193,
            Количество_нефискальных_документов2 = 194,
            Номер_первого_платежного_документа_в_суточном1 = 195,
            Номер_первого_платежного_документа_в_суточном2 = 196,
            Количество_аннулирований_за_смену1 = 197,
            Количество_аннулирований_за_смену2 = 198,
            Накопления_по_аннулированиям_в_смене = 255,

        }

        /// <summary>
        /// Тип фискального документа
        /// </summary>
        public enum DocType : int
        {
            /// <summary>
            /// Продажа
            /// </summary>
            Sale = 0,
            /// <summary>
            /// Возврат
            /// </summary>
            Return = 1,
        }
        /// <summary>
        /// Вид платежа
        /// </summary>
        public enum PayType : int
        {
            /// <summary>
            /// Наличный расчет
            /// </summary>
            Cash = 0,
            /// <summary>
            /// Платежной картой
            /// </summary>
            PayCard = 1,
            /// <summary>
            /// Кредитной картой
            /// </summary>
            CreditCard = 2,

        }
        /// <summary>
        /// Положение штрихкода на чеке
        /// </summary>
        public enum BarcodePosition
        {
            /// <summary>
            /// Сверху
            /// </summary>
            Top = 0,
            /// <summary>
            /// Снизу
            /// </summary>
            Bottom = 1,
        }
        #endregion

        public static string cach_path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "ShtrihFRData", "cacheData.dat");

        [Serializable]
        public abstract class ТЛВДок
        {
            public string НомерФН;
            public string НомерККТ;
            public string ИНН;
            public UInt32 НомерДокумента;
            public DateTime Дата;
            public UInt32 ФПДокумента;
            public UInt32 НомерСмены;
            public string НаименованиеПользователя;
            public string АдресатРасчетов;
        }
        [Serializable]
        public class ТЛВОтчет : ТЛВДок
        {
            public ТЛВОтчет()
            {
                //Чеки = new List<ТЛВЧек>();
            }

            public UInt32 ЧековЗаСмену;
            public UInt32 ФискальныхДокументовЗаСмену;
            public UInt32 НепереданныхДокументовЗаСмену;
            public DateTime ДатаИВремяПервогоНепереданного;
            public bool ИсчерпаниеРесурсовФН;
            public bool НеобходимаЗаменаФН;
            public bool ПереполнениеПамятиФН;
            public bool ПревышВремяОжиданияОтветаОФД;
            public string Кассир;
            //            public List<ТЛВЧек> Чеки;

            public int СквознойНомерДокумента;
            public string СерийныйНомерККТ;

            public int ЧековПриходаВообще;
            public int ЧековПриходаЗаСмену;
            public int ЧековРасходаВообще;
            public int ЧековРасходаЗаСмену;
            public int ЧековВозвратаПриходаВообще;
            public int ЧековВозвратаПриходаЗаСмену;
            public int ЧековВозвратаРасходаВообще;
            public int ЧековВозвратаРасходаЗаСмену;
            public int ВнесенийВообще;
            public int ВнесенийЗаСмену;
            public int ВыплатВообще;
            public int ВыплатЗаСмену;
            public int АннулированныхВообще;
            public int АннулированныхЗаСмену;
            public int АннулированныхЗаСменуПрихода;
            public int АннулированныхЗаСменуРасхода;
            public int АннулированныхЗаСменуВозвратаПрихода;
            public int АннулированныхЗаСменуВозвратаРасхода;

            public decimal СуммаИтогПриход;
            public decimal СуммаНалПриход;
            public decimal СуммаКартойМИРПриход;
            public decimal СуммаКартойVISAПриход;
            public decimal СуммаКартойMASTERCARDПриход;

            public decimal СуммаИтогРасход;
            public decimal СуммаНалРасход;
            public decimal СуммаКартойМИРРасход;
            public decimal СуммаКартойVISAРасход;
            public decimal СуммаКартойMASTERCARDРасход;

            public decimal СуммаИтогВозвратПриход;
            public decimal СуммаНалВозвратПриход;
            public decimal СуммаКартойМИРВозвратПриход;
            public decimal СуммаКартойVISAВозвратПриход;
            public decimal СуммаКартойMASTERCARDВозвратПриход;

            public decimal СуммаИтогВозвратРасход;
            public decimal СуммаНалВозвратРасход;
            public decimal СуммаКартойМИРВозвратРасход;
            public decimal СуммаКартойVISAВозвратРасход;
            public decimal СуммаКартойMASTERCARDВозвратРасход;

            public decimal СуммаВнесений;
            public decimal СуммаВыплат;
            public decimal СуммаАннулированныхЗаСменуПрихода;
            public decimal СуммаАннулированныхЗаСменуРасхода;
            public decimal СуммаАннулированныхЗаСменуВозвратаПрихода;
            public decimal СуммаАннулированныхЗаСменуВозвратаРасхода;
            public decimal СуммаНаличныхВКассе;
            public decimal СуммаВыручка;

            //public void racalcSums()
            //{
            //    СуммаИтогПриход = Чеки.Where(t => t.Приход == TLVIncomType.приход).Sum(t => t.Итог);
            //    СуммаНалПриход = Чеки.Where(t => t.Приход == TLVIncomType.приход).Sum(t => t.СуммаНал);
            //    СуммаЭлектронноПриход = Чеки.Where(t => t.Приход == TLVIncomType.приход).Sum(t => t.СуммаЭлектронно);
            //    СуммаБезНДСПриход = Чеки.Where(t => t.Приход == TLVIncomType.приход).Sum(t => t.СуммаБезНДС);

            //    СуммаИтогРасход = Чеки.Where(t => t.Приход == TLVIncomType.расход).Sum(t => t.Итог);
            //    СуммаНалРасход = Чеки.Where(t => t.Приход == TLVIncomType.расход).Sum(t => t.СуммаНал);
            //    СуммаЭлектронноРасход = Чеки.Where(t => t.Приход == TLVIncomType.расход).Sum(t => t.СуммаЭлектронно);
            //    СуммаБезНДСРасход = Чеки.Where(t => t.Приход == TLVIncomType.расход).Sum(t => t.СуммаБезНДС);

            //    СуммаИтогВозвратПриход = Чеки.Where(t => t.Приход == TLVIncomType.возврат_прихода).Sum(t => t.Итог);
            //    СуммаНалВозвратПриход = Чеки.Where(t => t.Приход == TLVIncomType.возврат_прихода).Sum(t => t.СуммаНал);
            //    СуммаЭлектронноВозвратПриход = Чеки.Where(t => t.Приход == TLVIncomType.возврат_прихода).Sum(t => t.СуммаЭлектронно);
            //    СуммаБезНДСВозвратПриход = Чеки.Where(t => t.Приход == TLVIncomType.возврат_прихода).Sum(t => t.СуммаБезНДС);

            //    СуммаИтогВозвратРасход = Чеки.Where(t => t.Приход == TLVIncomType.возврат_расхода).Sum(t => t.Итог);
            //    СуммаНалВозвратРасход = Чеки.Where(t => t.Приход == TLVIncomType.возврат_расхода).Sum(t => t.СуммаНал);
            //    СуммаЭлектронноВозвратРасход = Чеки.Where(t => t.Приход == TLVIncomType.возврат_расхода).Sum(t => t.СуммаЭлектронно);
            //    СуммаБезНДСВозвратРасход = Чеки.Where(t => t.Приход == TLVIncomType.возврат_расхода).Sum(t => t.СуммаБезНДС);
            //}
        }
        [Serializable]
        public class ТЛВЧек : ТЛВДок
        {
            public ТЛВЧек()
            {
                ПредметыРасчета = new List<ТЛВObject>();
            }

            public UInt32 НомерЧекаВСмене;
            public TLVIncomType Приход;
            public decimal Итог;
            public List<ТЛВObject> ПредметыРасчета;
            public string НомерАвтомата;
            public decimal СуммаНал;
            public decimal СуммаЭлектронно;
            public decimal СуммаБезНДС;
            public BitArray НалоговаяСистема;
            public string ТелефонИлиEMail;
        }
        [Serializable]
        public class ТЛВObject
        {
            public string НаименованиеПредметаРасчета;
            public decimal ЦенаСоСкидкамиИНаценками;
            public decimal КоличествоПредметаРасчета;
            public decimal СтоимостьСоСкидкамиИНаценками;
            public decimal СтоимостьБезНДС;
        }

        delegate string PrintDoc(DrvFR _driver, ТЛВДок doc);
        private static readonly Dictionary<Type, PrintDoc> TLVPrintActions =
            new Dictionary<Type, PrintDoc>
            {
                {typeof(ТЛВОтчет), GetTLVReportString},
                {typeof(ТЛВЧек), GetTLVCheckString},
            };

        private readonly DrvFR _driver;
        private CachType _reportsCach;
        public TLVReader(DrvFR driver)
        {
            if (driver == null)
                throw new Exception("Драйвер ФН не инициализирован (TLVReader драйвер - null)");
            _driver = driver;
            _reportsCach = DriveCacher<CachType>.Deserialize();//DriveCacher<CachType>.Deserialize();
            if (_reportsCach == null)
                _reportsCach = new CachType();
        }

        public static string GetTLVDocString(DrvFR _driver, ТЛВДок doc)
        {
            return TLVPrintActions[doc.GetType()](_driver, doc);
        }
        private static string GetTLVReportString(DrvFR _driver, ТЛВДок doc)
        {
            var report = doc as ТЛВОтчет;

            if (report == null)
                return null;

            StringBuilder sb = new StringBuilder();
            sb.Append(GetHeader(_driver));

            sb.Append(
$"ККТ {report.НомерККТ}   {report.Дата}" + "\r\n" +
$"N АВТОМАТА:{report.СерийныйНомерККТ} #{report.СквознойНомерДокумента}" + "\r\n" +
$"СУТОЧНЫЙ ОТЧЕТ ИНН {report.ИНН}" + "\r\n" +
$"РН ККТ {report.НомерККТ} ФН {report.НомерФН}" + "\r\n" +
$"Сайт ФНС: www.nalog.ru" + "\r\n" +
$"НОМЕР СМЕНЫ: {report.НомерСмены}" + "\r\n" +
$"КАССОВЫХ ЧЕКОВ ЗА СМЕНУ: {report.ЧековЗаСмену}" + "\r\n" +
$"ЧЕКОВ ПРИХОДА: {report.ЧековПриходаВообще.ToString().PadLeft(4)}" + "\r\n" +
$"{report.ЧековПриходаЗаСмену.ToString().PadLeft(4)} {report.СуммаИтогПриход}" + "\r\n" +
$"НАЛИЧНЫМИ {report.СуммаНалПриход}" + "\r\n" +
$"КАРТОЙ МИР {report.СуммаКартойМИРПриход}" + "\r\n" +
$"КАРТОЙ VISA {report.СуммаКартойVISAПриход}" + "\r\n" +
$"КАРТОЙ MASTERCARD {report.СуммаКартойMASTERCARDПриход}" + "\r\n" +
$"ЧЕКОВ РАСХОДА: {report.ЧековРасходаВообще.ToString().PadLeft(4)}" + "\r\n" +
$"{report.ЧековРасходаЗаСмену.ToString().PadLeft(4)} {report.СуммаИтогРасход}" + "\r\n" +
$"НАЛИЧНЫМИ {report.СуммаНалРасход}" + "\r\n" +
$"КАРТОЙ МИР {report.СуммаКартойМИРРасход}" + "\r\n" +
$"КАРТОЙ VISA {report.СуммаКартойVISAРасход}" + "\r\n" +
$"КАРТОЙ MASTERCARD {report.СуммаКартойMASTERCARDРасход}" + "\r\n" +
$"ЧЕКОВ ВОЗВРАТОВ ПРИХОДА: {report.ЧековВозвратаПриходаВообще.ToString().PadLeft(4)}" + "\r\n" +
$"{report.ЧековВозвратаПриходаЗаСмену.ToString().PadLeft(4)} {report.СуммаИтогВозвратПриход}" + "\r\n" +
$"НАЛИЧНЫМИ {report.СуммаНалВозвратПриход}" + "\r\n" +
$"КАРТОЙ МИР {report.СуммаКартойМИРВозвратПриход}" + "\r\n" +
$"КАРТОЙ VISA {report.СуммаКартойVISAВозвратПриход}" + "\r\n" +
$"КАРТОЙ MASTERCARD {report.СуммаКартойMASTERCARDВозвратПриход}" + "\r\n" +
$"ЧЕКОВ ВОЗВРАТОВ РАСХОДА: {report.ЧековВозвратаРасходаВообще.ToString().PadLeft(4)}" + "\r\n" +
$"{report.ЧековВозвратаРасходаЗаСмену.ToString().PadLeft(4)} {report.СуммаИтогВозвратРасход}" + "\r\n" +
$"НАЛИЧНЫМИ {report.СуммаНалВозвратРасход}" + "\r\n" +
$"КАРТОЙ МИР {report.СуммаКартойМИРВозвратРасход}" + "\r\n" +
$"КАРТОЙ VISA {report.СуммаКартойVISAВозвратРасход}" + "\r\n" +
$"КАРТОЙ MASTERCARD {report.СуммаКартойMASTERCARDВозвратРасход}" + "\r\n" +
$"ВНЕСЕНИЙ: {report.ВнесенийВообще.ToString().PadLeft(4)}" + "\r\n" +
$"{report.ВнесенийЗаСмену.ToString().PadLeft(4)} {report.СуммаВнесений}" + "\r\n" +
$"ВЫПЛАТ: {report.ВыплатВообще.ToString().PadLeft(4)}" + "\r\n" +
$"{report.ВыплатЗаСмену.ToString().PadLeft(4)} {report.СуммаВыплат}" + "\r\n" +
$"АННУЛИРОВАННЫХ ЧЕКОВ: {report.АннулированныхВообще.ToString().PadLeft(4)}" + "\r\n" +
$"{report.АннулированныхЗаСмену.ToString().PadLeft(4)}" + "\r\n" +
$"{report.АннулированныхЗаСменуПрихода.ToString().PadLeft(4)} ПРИХОДА {report.СуммаАннулированныхЗаСменуПрихода}" + "\r\n" +
$"{report.АннулированныхЗаСменуРасхода.ToString().PadLeft(4)} РАСХОДА {report.СуммаАннулированныхЗаСменуРасхода}" + "\r\n" +
$"{report.АннулированныхЗаСменуВозвратаПрихода.ToString().PadLeft(4)} ВОЗВР. ПРИХОДА {report.СуммаАннулированныхЗаСменуВозвратаПрихода}" + "\r\n" +
$"{report.АннулированныхЗаСменуВозвратаРасхода.ToString().PadLeft(4)} ВОЗВР. РАСХОДА {report.СуммаАннулированныхЗаСменуВозвратаРасхода}" + "\r\n" +
$"НАЛ. В КАССЕ: {report.СуммаНаличныхВКассе}" + "\r\n" +
$"ВЫРУЧКА: {report.СуммаВыручка}" + "\r\n");

            return sb.ToString();
        }
        private static string GetTLVCheckString(DrvFR _driver, ТЛВДок doc)
        {
            var check = doc as ТЛВЧек;

            if (check == null)
                return null;

            throw new NotImplementedException();
        }

        public void AddToCach(ТЛВОтчет report)
        {
            ТЛВОтчет currentReport;
            if (!_reportsCach.TryGetValue(report.НомерДокумента, out currentReport))
            {
                _reportsCach.Add(report.НомерДокумента, report);
                DriveCacher<CachType>.Serialize(_reportsCach);
                //DriveCacher<CachType>.Serialize(_reportsCach);
            }
        }
        public void ClearCach()
        {
            var t = new Dictionary<UInt32, ТЛВОтчет>();
            _reportsCach = t;
            DriveCacher<CachType>.Serialize(_reportsCach);
            //DriveCacher<CachType>.Serialize(_reportsCach);
        }

        private ТЛВДок CreateDoc(TLVDocType type)
        {
            ТЛВДок rep = null;
            if (type == TLVDocType.Отчёт_о_закрытии_смены)
            {
                rep = new ТЛВОтчет();
            }
            if (type == TLVDocType.Кассовый_чек)
            {
                rep = new ТЛВЧек();
            }
            return rep;
        }
        public ТЛВДок ReadTLVDoc(int docNum, ТЛВДок doc = null)
        {
            TLVDocType type = GetTLVType(docNum);

            if (type == TLVDocType.Отчёт_о_закрытии_смены)
            {
                ТЛВОтчет report;
                if (_reportsCach.TryGetValue((uint)docNum, out report))
                    return report;
            }

            if (doc == null)
                doc = CreateDoc(type);
            //StringBuilder result = new StringBuilder();
            _driver.FNReadFiscalDocumentTLV();
            while (_driver.ResultCode == 0)
            {
                //result.Append(_driver.TLVData);
                //i += _driver.TLVData.Length;
                if (type == TLVDocType.Отчёт_о_закрытии_смены)
                {
                    ReadTLVReportProperty(ref doc, _driver.TLVData);
                }
                if (type == TLVDocType.Кассовый_чек)
                {
                    ReadTLVCheckProperty(ref doc, _driver.TLVData);
                }
                //result.Append("\r\n\r\n\r\n");
                _driver.FNReadFiscalDocumentTLV();
            }

            if (type == TLVDocType.Отчёт_о_закрытии_смены)
            {
                //ReadCurrentReportRegisters(doc);
                //    var report = doc as ТЛВОтчет;

                //    int currentDocNum = --docNum;
                //    while (report.Чеки.Count < report.ЧековЗаСмену)
                //    {
                //        var tlvType = GetTLVType(currentDocNum);
                //        if (tlvType == TLVDocType.Кассовый_чек)
                //        {
                //            ТЛВЧек check;
                //            if (!reportsCach.TryGetValue((uint)currentDocNum, out check))
                //            {
                //                check = (ТЛВЧек)ReadTLVDoc(currentDocNum);
                //                reportsCach.Add(check.НомерДокумента, check);
                //            }
                //            report.Чеки.Add(check);
                //            --currentDocNum;
                //        }
                //        else if (tlvType == TLVDocType.Отчёт_о_закрытии_смены)
                //            break;
                //    }
                //    report.racalcSums();
            }
            //if (type == TLVDocType.Кассовый_чек)
            //{
            //    var check = doc as ТЛВЧек;
            //    reportsCach.Add(check.НомерДокумента, check);
            //}
            //File.WriteAllText(@"C:\Users\milvu\Documents\TMP\WriteText.txt", BitConverter.ToString(Encoding.Default.GetBytes(result.ToString())));
            //Console.WriteLine($"документ 175:{BitConverter.ToString(bytes)}");

            return doc;
        }
        private bool ReadTLVCommonDocProperty(ref ТЛВДок report, string line)
        {
            var bts = Encoding.GetEncoding(1251).GetBytes(line);
            TLVTag teg = (TLVTag)BitConverter.ToUInt16(bts, 0);
            var length = BitConverter.ToUInt16(bts, 2);
            var result = false;
            if (teg == TLVTag.НомерФН)
            {
                report.НомерФН = line.Substring(4);
                result = true;
            }
            if (teg == TLVTag.НомерККТ)
            {
                report.НомерККТ = line.Substring(4);
                result = true;
            }
            if (teg == TLVTag.NHH)
            {
                report.ИНН = line.Substring(4);
                result = true;
            }
            if (teg == TLVTag.НомерДокумента)
            {
                report.НомерДокумента = BitConverter.ToUInt32(bts, 4);
                result = true;
            }
            if (teg == TLVTag.Дата)
            {
                report.Дата = ReadData(BitConverter.ToInt32(bts, 4));
                result = true;
            }
            if (teg == TLVTag.ФПДокумента)
            {
                var data = new byte[length - 2];
                Array.Copy(bts, 6, data, 0, length - 2);
                data = data.Reverse().ToArray();
                report.ФПДокумента = BitConverter.ToUInt32(data, 0);
                result = true;
            }
            if (teg == TLVTag.НомерСмены)
            {
                report.НомерСмены = BitConverter.ToUInt32(bts, 4);
                result = true;
            }
            if (teg == TLVTag.НаименованиеПользователя)
            {
                report.НаименованиеПользователя = ReadRUSText(bts, 4, length);
                result = true;
            }
            if (teg == TLVTag.АдресатРасчетов)
            {
                report.АдресатРасчетов = ReadRUSText(bts, 4, length);
                result = true;
            }
            return result;
        }
        private bool ReadTLVReportProperty(ref ТЛВДок report, string line)
        {
            var bts = Encoding.GetEncoding(1251).GetBytes(line);
            TLVTag teg = (TLVTag)BitConverter.ToUInt16(bts, 0);
            var length = BitConverter.ToUInt16(bts, 2);
            var result = ReadTLVCommonDocProperty(ref report, line);
            if (result)
                return result;

            var rep = report as ТЛВОтчет;
            if (rep == null)
                return result;

            if (teg == TLVTag.ЧековЗаСмену)
            {
                rep.ЧековЗаСмену = BitConverter.ToUInt32(bts, 4);
                result = true;
            }
            if (teg == TLVTag.ФискальныхДокументовЗаСмену)
            {
                rep.ФискальныхДокументовЗаСмену = BitConverter.ToUInt32(bts, 4);
                result = true;
            }
            if (teg == TLVTag.НепереданныхДокументовЗаСмену)
            {
                rep.НепереданныхДокументовЗаСмену = BitConverter.ToUInt32(bts, 4);
                result = true;
            }
            if (teg == TLVTag.ДатаИВремяПервогоНепереданного)
            {
                rep.ДатаИВремяПервогоНепереданного = ReadData(BitConverter.ToInt32(bts, 4));
                result = true;
            }
            if (teg == TLVTag.ИсчерпаниеРесурсовФН)
            {
                rep.ИсчерпаниеРесурсовФН = BitConverter.ToBoolean(bts, 4);
                result = true;
            }
            if (teg == TLVTag.НеобходимаЗаменаФН)
            {
                rep.НеобходимаЗаменаФН = BitConverter.ToBoolean(bts, 4);
                result = true;
            }
            if (teg == TLVTag.ПереполнениеПамятиФН)
            {
                rep.ПереполнениеПамятиФН = BitConverter.ToBoolean(bts, 4);
                result = true;
            }
            if (teg == TLVTag.ПревышВремяОжиданияОтветаОФД)
            {
                rep.ПревышВремяОжиданияОтветаОФД = BitConverter.ToBoolean(bts, 4);
                result = true;
            }
            if (teg == TLVTag.Кассир)
            {
                rep.Кассир = ReadRUSText(bts, 4, length);
                result = true;
            }
            return result;
        }
        private bool ReadTLVCheckProperty(ref ТЛВДок report, string line)
        {
            var bts = Encoding.GetEncoding(1251).GetBytes(line);
            TLVTag teg = (TLVTag)BitConverter.ToUInt16(bts, 0);
            var length = BitConverter.ToUInt16(bts, 2);

            bool result = ReadTLVCommonDocProperty(ref report, line);
            if (result)
                return result;

            var rep = report as ТЛВЧек;
            if (rep == null)
                return result;

            if (teg == TLVTag.НомерЧекаВСмене)
            {
                rep.НомерЧекаВСмене = BitConverter.ToUInt32(bts, 4);
                result = true;
            }
            if (teg == TLVTag.Приход)
            {
                rep.Приход = (TLVIncomType)bts[4];
                result = true;
            }
            if (teg == TLVTag.Итог)
            {
                rep.Итог = ReadDecimal(bts, 4, length, false);
                result = true;
            }
            if (teg == TLVTag.ТелефонИлиEMail)
            {
                rep.ТелефонИлиEMail = ReadRUSText(bts, 4, length);
                result = true;
            }
            if (teg == TLVTag.ПредметРасчета)
            {
                rep.ПредметыРасчета.Add(ReadTLVCheckObject(bts, 4));
                result = true;
            }
            if (teg == TLVTag.НомерАвтомата)
            {
                rep.НомерАвтомата = line.Substring(4);
                result = true;
            }
            if (teg == TLVTag.СуммаНал)
            {
                rep.СуммаНал = ReadDecimal(bts, 4, length, false);
                result = true;
            }
            if (teg == TLVTag.СуммаЭлектронно)
            {
                rep.СуммаЭлектронно = ReadDecimal(bts, 4, length, false);
                result = true;
            }
            if (teg == TLVTag.СуммаБезНДС)
            {
                rep.СуммаБезНДС = ReadDecimal(bts, 4, length, false);
                result = true;
            }
            if (teg == TLVTag.НалоговаяСистема)
            {
                string s = Convert.ToString(bts[4], 2);

                int[] bits = s.PadRight(8, '0')
                    .Select(c => int.Parse(c.ToString()))
                    .ToArray();

                rep.НалоговаяСистема = new BitArray(8);
                for (int ind = 0; ind < 8; ++ind)
                {
                    rep.НалоговаяСистема.Set(ind, Convert.ToBoolean(bits[ind]));
                }

                result = true;
            }

            return result;
        }
        public bool ReadCurrentReportRegisters(ТЛВДок doc)
        {
            var report = doc as ТЛВОтчет;

            if (report != null)
            {
                report.СквознойНомерДокумента =
                    GetOperationRegister(OperationRegisterType.Сквозной_номер_документа1);
                report.СерийныйНомерККТ = GetSerial();

                report.ЧековПриходаВообще =
                    GetOperationRegister(OperationRegisterType.Номер_чека_продаж);
                report.ЧековПриходаЗаСмену =
                    GetOperationRegister(OperationRegisterType.Количество_чеков_продаж_в_смене);
                report.ЧековРасходаВообще =
                    GetOperationRegister(OperationRegisterType.Номер_чека_покупок);
                report.ЧековРасходаЗаСмену =
                    GetOperationRegister(OperationRegisterType.Количество_чеков_покупок_в_смене);
                report.ЧековВозвратаПриходаВообще =
                    GetOperationRegister(OperationRegisterType.Номер_чека_возврата_продаж);
                report.ЧековВозвратаПриходаЗаСмену =
                    GetOperationRegister(OperationRegisterType.Количество_чеков_возврата_продаж_в_смене);
                report.ЧековВозвратаРасходаВообще =
                    GetOperationRegister(OperationRegisterType.Номер_чека_возврата_покупок);
                report.ЧековВозвратаРасходаЗаСмену =
                    GetOperationRegister(OperationRegisterType.Количество_чеков_возврата_покупок_в_смене);
                report.ВнесенийВообще =
                    GetOperationRegister(OperationRegisterType.Номер_внесения_денежных_сумм);
                report.ВнесенийЗаСмену =
                    GetOperationRegister(OperationRegisterType.Количество_внесений_денежных_сумм_за_смену);
                report.ВыплатВообще =
                    GetOperationRegister(OperationRegisterType.Номер_выплаты_денежных_сумм);
                report.ВыплатЗаСмену =
                    GetOperationRegister(OperationRegisterType.Количество_выплат_денежных_сумм_за_смену);
                report.АннулированныхВообще =
                    GetOperationRegister(OperationRegisterType.Количество_аннулирований);
                report.АннулированныхЗаСмену =
                    GetOperationRegister(OperationRegisterType.Количество_отмененных_документов_за_смену);
                report.АннулированныхЗаСменуПрихода =
                    GetOperationRegister(OperationRegisterType.Количество_аннулированных_чеков_продаж);
                report.АннулированныхЗаСменуРасхода =
                    GetOperationRegister(OperationRegisterType.Количество_аннулированных_чеков_покупок);
                report.АннулированныхЗаСменуВозвратаПрихода =
                    GetOperationRegister(OperationRegisterType.Количество_аннулированных_чеков_возврата_продаж);
                report.АннулированныхЗаСменуВозвратаРасхода =
                    GetOperationRegister(OperationRegisterType.Количество_аннулированных_чеков_возврата_покупок);

                report.СуммаИтогПриход =
                    GetCashRegister(CashRegisterType.Накопление_продаж_в_1_отдел_в_смене) -
                    GetCashRegister(CashRegisterType.Накопление_скидок_с_продаж_в_смене);
                report.СуммаНалПриход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_продаж_наличными_в_смене);
                report.СуммаКартойМИРПриход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_продаж_видом_оплаты_2_в_смене);
                report.СуммаКартойVISAПриход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_продаж_видом_оплаты_3_в_смене);
                report.СуммаКартойMASTERCARDПриход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_продаж_видом_оплаты_4_в_смене);


                report.СуммаИтогРасход =
                    GetCashRegister(CashRegisterType.Накопление_покупок_в_1_отдел_в_смене) -
                    GetCashRegister(CashRegisterType.Накопление_скидок_с_покупок_в_смене);
                report.СуммаНалРасход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_покупок_наличными_в_смене);
                report.СуммаКартойМИРРасход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_покупок_видом_оплаты_2_в_смене);
                report.СуммаКартойVISAРасход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_покупок_видом_оплаты_3_в_смене);
                report.СуммаКартойMASTERCARDРасход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_покупок_видом_оплаты_4_в_смене);

                report.СуммаИтогВозвратПриход =
                    GetCashRegister(CashRegisterType.Накопление_возврата_продаж_в_1_отдел_в_смене) -
                    GetCashRegister(CashRegisterType.Накопление_скидок_с_возврата_продаж_в_смене);
                report.СуммаНалВозвратПриход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_возврата_продаж_наличными_в_смене);
                report.СуммаКартойМИРВозвратПриход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_возврата_продаж_видом_оплаты_2_в_смене);
                report.СуммаКартойVISAВозвратПриход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_возврата_продаж_видом_оплаты_3_в_смене);
                report.СуммаКартойMASTERCARDВозвратПриход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_возврата_продаж_видом_оплаты_4_в_смене);

                report.СуммаИтогВозвратРасход =
                    GetCashRegister(CashRegisterType.Накопление_возврата_покупок_в_1_отдел_в_смене) -
                    GetCashRegister(CashRegisterType.Накопление_скидок_с_возврата_покупок_в_смене);
                report.СуммаНалВозвратРасход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_возврата_покупок_наличными_в_смене);
                report.СуммаКартойМИРВозвратРасход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_возврата_покупок_видом_оплаты_2_в_смене);
                report.СуммаКартойVISAВозвратРасход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_возврата_покупок_видом_оплаты_3_в_смене);
                report.СуммаКартойMASTERCARDВозвратРасход =
                    GetCashRegister(CashRegisterType.Накопление_оплат_возврата_покупок_видом_оплаты_4_в_смене);

                report.СуммаВнесений =
                    GetCashRegister(CashRegisterType.Накопление_внесений_за_смену);
                report.СуммаВыплат =
                    GetCashRegister(CashRegisterType.Накопление_выплат_за_смену);
                report.СуммаАннулированныхЗаСменуПрихода =
                    GetCashRegister(CashRegisterType.Сумма_аннулированных_продаж_в_смене);
                report.СуммаАннулированныхЗаСменуРасхода =
                    GetCashRegister(CashRegisterType.Сумма_аннулированных_покупок_в_смене);
                report.СуммаАннулированныхЗаСменуВозвратаПрихода =
                    GetCashRegister(CashRegisterType.Сумма_аннулированных_возвратов_продаж_в_смене);
                report.СуммаАннулированныхЗаСменуВозвратаРасхода =
                    GetCashRegister(CashRegisterType.Сумма_аннулированных_возвратов_покупок_в_смене);
                report.СуммаНаличныхВКассе =
                    GetCashRegister(CashRegisterType.Накопление_наличности_в_кассе);
                report.СуммаВыручка = report.СуммаИтогПриход + report.СуммаИтогВозвратРасход -
                                      report.СуммаИтогРасход - report.СуммаИтогВозвратПриход;
                return true;
            }
            return false;
        }

        private ТЛВObject ReadTLVCheckObject(byte[] data, int index)
        {
            var obj = new ТЛВObject();
            var len = data.Length;
            while (index < len)
            {
                TLVObjectTag teg = (TLVObjectTag)BitConverter.ToUInt16(data, index);
                var length = BitConverter.ToUInt16(data, index + 2);
                ReadTLVCheckObjectProperty(teg, length, ref obj, data, index + 4);
                index += length + 4;
            }
            return obj;
        }
        private bool ReadTLVCheckObjectProperty(TLVObjectTag teg, int length, ref ТЛВObject obj, byte[] data, int index)
        {
            var result = false;
            if (teg == TLVObjectTag.НаименованиеПредметаРасчета)
            {
                obj.НаименованиеПредметаРасчета = ReadRUSText(data, index, length);
                result = true;
            }
            if (teg == TLVObjectTag.ЦенаСоСкидкамиИНаценками)
            {
                obj.ЦенаСоСкидкамиИНаценками = ReadDecimal(data, index, length, false);
                result = true;
            }
            if (teg == TLVObjectTag.КоличествоПредметаРасчета)
            {
                obj.КоличествоПредметаРасчета = ReadDecimal(data, index, length, true);
                result = true;
            }
            if (teg == TLVObjectTag.СтоимостьСоСкидкамиИНаценками)
            {
                obj.СтоимостьСоСкидкамиИНаценками = ReadDecimal(data, index, length, false);
                result = true;
            }
            if (teg == TLVObjectTag.СтоимостьБезНДС)
            {
                obj.СтоимостьБезНДС = ReadDecimal(data, index, length, false);
                result = true;
            }
            return result;
        }

        private DateTime ReadData(int secs)
        {
            var epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            return epoch.AddSeconds(secs);
        }
        private string ReadRUSText(byte[] src, int index, int length)
        {
            return Encoding.GetEncoding(866).GetString(src, index, length);
        }
        private decimal ReadDecimal(byte[] src, int index, int length, bool FVLN)
        {
            double pointIndex;
            if (FVLN)
            {
                pointIndex = src[index];
                ++index;
                --length;
            }
            else
                pointIndex = 2;

            byte[] data = new byte[4];
            Array.Copy(src, index, data, 0, length);
            var intRepresentation = BitConverter.ToInt32(data, 0);
            return (decimal)intRepresentation / (decimal)Math.Pow(10, pointIndex);
        }

        public TLVDocType GetTLVType(int docNum)
        {
            _driver.DocumentNumber = docNum;
            _driver.FNRequestFiscalDocumentTLV();
            if (_driver.ResultCode != 0)
                return TLVDocType.Ошибка;

            return (TLVDocType)_driver.DocumentType;
        }
        public decimal GetCashRegister(CashRegisterType reg)
        {
            _driver.RegisterNumber = (int)reg;
            _driver.GetCashReg();

            if (_driver.ResultCode != 0)
                return -1;

            return _driver.ContentsOfCashRegister/*100*/;
        }
        public int GetOperationRegister(OperationRegisterType reg)
        {
            _driver.RegisterNumber = (int)reg;
            _driver.GetOperationReg();

            if (_driver.ResultCode != 0)
                return -1;

            return _driver.ContentsOfOperationRegister/*100*/;
        }
        public static string GetHeader(DrvFR _driver)
        {
            StringBuilder sb = new StringBuilder();

            if (_driver == null)
                return sb.ToString();

            for (int i = 0; i < 14; ++i)
            {
                _driver.TableNumber = 4;
                _driver.GetTableStruct();

                _driver.RowNumber = i + 1;
                _driver.FieldNumber = 1;
                _driver.GetFieldStruct();

                _driver.ReadTable();
                var line = _driver.ValueOfFieldString;
                if (!string.IsNullOrWhiteSpace(line))
                {
                    sb.Append(line);
                    sb.Append("\r\n");
                }
            }

            return sb.ToString();
        }
        public int GetLastDocNumber()
        {
            if (_driver == null)
                return -1;

            _driver.FNGetStatus();

            if (_driver.ResultCode != 0)
                return -1;

            return _driver.DocumentNumber;
        }
        public string GetSerial()
        {
            if (_driver == null)
                return null;

            _driver.TableNumber = 18;
            _driver.GetTableStruct();

            _driver.RowNumber = 1;
            _driver.FieldNumber = 1;
            _driver.GetFieldStruct();

            _driver.ReadTable();

            if (_driver.ResultCode != 0)
                return null;

            return _driver.ValueOfFieldString;
        }
    }
}